/**
 * Cron Jobs pour la gestion des abonnements Claudyne
 * Ex√©cute les v√©rifications quotidiennes automatiques
 */

const cron = require('node-cron');
const database = require('../config/database');
const SubscriptionService = require('../services/subscriptionService');
const logger = require('../utils/logger');

class SubscriptionCronJobs {
  constructor() {
    this.subscriptionService = null;
    this.jobs = [];
  }

  /**
   * Initialiser les cron jobs
   */
  async initialize() {
    try {
      // Initialiser la base de donn√©es et le service
      const models = database.initializeModels();
      this.subscriptionService = new SubscriptionService(models);

      logger.info('üöÄ Initialisation des cron jobs d\'abonnement...', {
        service: 'subscription-cron'
      });

      this.setupJobs();

      logger.info('‚úÖ Cron jobs d\'abonnement initialis√©s avec succ√®s', {
        jobCount: this.jobs.length
      });

    } catch (error) {
      logger.error('‚ùå Erreur initialisation cron jobs:', error);
      throw error;
    }
  }

  /**
   * Configurer tous les cron jobs
   */
  setupJobs() {
    // Job 1: V√©rifier les essais expir√©s - Tous les jours √† minuit
    this.jobs.push(
      cron.schedule('0 0 * * *', async () => {
        logger.info('‚è∞ D√©marrage: V√©rification essais expir√©s (00:00)');
        try {
          const result = await this.subscriptionService.checkExpiredTrials();
          logger.info('‚úÖ V√©rification essais termin√©e', result);
        } catch (error) {
          logger.error('‚ùå Erreur v√©rification essais:', error);
        }
      }, {
        timezone: 'Africa/Douala'
      })
    );

    // Job 2: V√©rifier les abonnements expir√©s - Tous les jours √† 00:30
    this.jobs.push(
      cron.schedule('30 0 * * *', async () => {
        logger.info('‚è∞ D√©marrage: V√©rification abonnements expir√©s (00:30)');
        try {
          const result = await this.subscriptionService.checkExpiredSubscriptions();
          logger.info('‚úÖ V√©rification abonnements termin√©e', result);
        } catch (error) {
          logger.error('‚ùå Erreur v√©rification abonnements:', error);
        }
      }, {
        timezone: 'Africa/Douala'
      })
    );

    // Job 3: Traiter les renouvellements automatiques - Tous les jours √† 08:00
    this.jobs.push(
      cron.schedule('0 8 * * *', async () => {
        logger.info('‚è∞ D√©marrage: Traitement renouvellements automatiques (08:00)');
        try {
          const result = await this.subscriptionService.processAutoRenewals();
          logger.info('‚úÖ Renouvellements trait√©s', result);
        } catch (error) {
          logger.error('‚ùå Erreur traitement renouvellements:', error);
        }
      }, {
        timezone: 'Africa/Douala'
      })
    );

    // Job 4: Envoyer rappels d'expiration - Tous les jours √† 10:00
    this.jobs.push(
      cron.schedule('0 10 * * *', async () => {
        logger.info('‚è∞ D√©marrage: Envoi rappels d\'expiration (10:00)');
        try {
          const result = await this.subscriptionService.sendExpirationReminders();
          logger.info('‚úÖ Rappels envoy√©s', result);
        } catch (error) {
          logger.error('‚ùå Erreur envoi rappels:', error);
        }
      }, {
        timezone: 'Africa/Douala'
      })
    );

    // Job 5: G√©n√©rer rapport quotidien - Tous les jours √† 23:00
    this.jobs.push(
      cron.schedule('0 23 * * *', async () => {
        logger.info('‚è∞ D√©marrage: G√©n√©ration rapport quotidien (23:00)');
        try {
          const result = await this.subscriptionService.generateDailyReport();
          logger.info('‚úÖ Rapport quotidien g√©n√©r√©', result);
        } catch (error) {
          logger.error('‚ùå Erreur g√©n√©ration rapport:', error);
        }
      }, {
        timezone: 'Africa/Douala'
      })
    );

    // Job 6: T√¢che compl√®te de v√©rification - Tous les dimanches √† 02:00
    this.jobs.push(
      cron.schedule('0 2 * * 0', async () => {
        logger.info('‚è∞ D√©marrage: V√©rification compl√®te hebdomadaire (Dimanche 02:00)');
        try {
          const result = await this.subscriptionService.runDailyJobs();
          logger.info('‚úÖ V√©rification compl√®te termin√©e', result);
        } catch (error) {
          logger.error('‚ùå Erreur v√©rification compl√®te:', error);
        }
      }, {
        timezone: 'Africa/Douala'
      })
    );

    logger.info(`‚úÖ ${this.jobs.length} cron jobs configur√©s`, {
      jobs: [
        '00:00 - Essais expir√©s',
        '00:30 - Abonnements expir√©s',
        '08:00 - Renouvellements auto',
        '10:00 - Rappels expiration',
        '23:00 - Rapport quotidien',
        '02:00 (Dim) - V√©rification compl√®te'
      ]
    });
  }

  /**
   * D√©marrer tous les cron jobs
   */
  start() {
    logger.info('‚ñ∂Ô∏è D√©marrage des cron jobs d\'abonnement...');
    this.jobs.forEach(job => job.start());
    logger.info(`‚úÖ ${this.jobs.length} cron jobs actifs`);
  }

  /**
   * Arr√™ter tous les cron jobs
   */
  stop() {
    logger.info('‚è∏Ô∏è Arr√™t des cron jobs d\'abonnement...');
    this.jobs.forEach(job => job.stop());
    logger.info('‚úÖ Cron jobs arr√™t√©s');
  }

  /**
   * Ex√©cuter manuellement un job sp√©cifique (pour testing)
   */
  async runManualJob(jobName) {
    try {
      logger.info(`üîß Ex√©cution manuelle: ${jobName}`);

      let result;
      switch (jobName) {
        case 'checkExpiredTrials':
          result = await this.subscriptionService.checkExpiredTrials();
          break;
        case 'checkExpiredSubscriptions':
          result = await this.subscriptionService.checkExpiredSubscriptions();
          break;
        case 'processAutoRenewals':
          result = await this.subscriptionService.processAutoRenewals();
          break;
        case 'sendExpirationReminders':
          result = await this.subscriptionService.sendExpirationReminders();
          break;
        case 'generateDailyReport':
          result = await this.subscriptionService.generateDailyReport();
          break;
        case 'runDailyJobs':
          result = await this.subscriptionService.runDailyJobs();
          break;
        default:
          throw new Error(`Job inconnu: ${jobName}`);
      }

      logger.info(`‚úÖ Job ${jobName} termin√©`, result);
      return result;

    } catch (error) {
      logger.error(`‚ùå Erreur job ${jobName}:`, error);
      throw error;
    }
  }
}

// Instance singleton
const cronJobsInstance = new SubscriptionCronJobs();

// Initialiser et d√©marrer si ex√©cut√© directement
if (require.main === module) {
  cronJobsInstance.initialize()
    .then(() => {
      cronJobsInstance.start();
      logger.info('üéØ Cron jobs d√©marr√©s avec succ√®s');

      // Garder le processus actif
      process.on('SIGINT', () => {
        logger.info('üõë Arr√™t des cron jobs...');
        cronJobsInstance.stop();
        process.exit(0);
      });
    })
    .catch(error => {
      logger.error('‚ùå √âchec d√©marrage cron jobs:', error);
      process.exit(1);
    });
}

module.exports = cronJobsInstance;
