# Docker Compose Production - Claudyne
# Configuration optimisée pour VPS Contabo et réseaux Cameroun

version: '3.8'

networks:
  claudyne-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local

services:
  # ================================
  # NGINX Reverse Proxy + SSL
  # ================================
  nginx:
    image: nginx:alpine
    container_name: claudyne-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ssl_certs:/etc/letsencrypt
      - nginx_logs:/var/log/nginx
      - uploads_data:/var/www/uploads:ro
    environment:
      - DOMAIN_NAME=claudyne.com
      - BACKEND_HOST=backend
      - FRONTEND_HOST=frontend
    networks:
      - claudyne-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # Frontend (Nginx Static)
  # ================================
  frontend:
    image: nginx:alpine
    container_name: claudyne-frontend
    restart: unless-stopped
    volumes:
      - ./:/usr/share/nginx/html:ro
      - ./nginx/frontend.conf:/etc/nginx/conf.d/default.conf:ro
      - uploads_data:/usr/share/nginx/html/uploads:ro
    environment:
      - API_URL=https://claudyne.com/api
    networks:
      - claudyne-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 5s
      retries: 3

  # ================================
  # Backend Node.js API
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: claudyne-backend
    restart: unless-stopped
    environment:
      # Base
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0

      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=claudyne_prod
      - DB_USER=claudyne_user
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_SSL=false

      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0

      # JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=7d

      # MAVIANCE (Production)
      - MAVIANCE_API_URL=${MAVIANCE_API_URL}
      - MAVIANCE_API_KEY=${MAVIANCE_API_KEY}
      - MAVIANCE_SECRET_KEY=${MAVIANCE_SECRET_KEY}
      - MAVIANCE_MERCHANT_ID=${MAVIANCE_MERCHANT_ID}

      # URLs
      - FRONTEND_URL=https://claudyne.com
      - BACKEND_URL=https://claudyne.com/api

      # Optimisations Cameroun
      - MAX_REQUEST_SIZE=1mb
      - COMPRESSION_LEVEL=6
      - CACHE_TTL=300
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100

      # Monitoring
      - LOG_LEVEL=info
      - SENTRY_DSN=${SENTRY_DSN}

    volumes:
      - uploads_data:/app/public/uploads
      - logs_data:/app/logs
    networks:
      - claudyne-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: claudyne-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=claudyne_prod
      - POSTGRES_USER=claudyne_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=fr_FR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - claudyne-network
    ports:
      - "127.0.0.1:5432:5432"  # Accessible uniquement en local
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claudyne_user -d claudyne_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    sysctls:
      - net.core.somaxconn=1024
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: claudyne-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - claudyne-network
    ports:
      - "127.0.0.1:6379:6379"  # Accessible uniquement en local
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    sysctls:
      - net.core.somaxconn=1024

  # ================================
  # Monitoring - Prometheus (optionnel)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: claudyne-prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - claudyne-network
    depends_on:
      - backend

  # ================================
  # Monitoring - Grafana (optionnel)
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: claudyne-grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    networks:
      - claudyne-network
    depends_on:
      - prometheus

  # ================================
  # Backup automatique
  # ================================
  backup:
    image: alpine:latest
    container_name: claudyne-backup
    restart: unless-stopped
    profiles: ["backup"]
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=0 2 * * *  # Tous les jours à 2h
      - RETENTION_DAYS=7
    volumes:
      - postgres_data:/data/postgres:ro
      - uploads_data:/data/uploads:ro
      - ./backups:/backups
    networks:
      - claudyne-network
    depends_on:
      - postgres
    command: >
      sh -c "
        apk add --no-cache postgresql-client aws-cli &&
        echo '${BACKUP_SCHEDULE} /backup.sh' | crontab - &&
        crond -f
      "