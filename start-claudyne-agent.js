#!/usr/bin/env node
/**
 * start-claudyne-agent.js - Script de d√©marrage unifi√© pour l'agent Claudyne
 *
 * Point d'entr√©e principal pour d√©marrer tous les composants de l'agent
 * avec configuration automatique et interface utilisateur
 */

const ClaudyneCodeAgent = require('./ClaudyneCodeAgent');
const ClaudyneMonitoringDashboard = require('./ClaudyneMonitoringDashboard');
const ClaudyneWorkflowIntegration = require('./ClaudyneWorkflowIntegration');
const ClaudyneIntelligentRecommendations = require('./ClaudyneIntelligentRecommendations');

const path = require('path');
const fs = require('fs').promises;

class ClaudyneAgentLauncher {
    constructor() {
        this.config = this.loadConfiguration();
        this.components = {
            agent: null,
            dashboard: null,
            workflow: null,
            recommendations: null
        };
    }

    loadConfiguration() {
        const defaultConfig = {
            // Configuration de l'agent
            agent: {
                projectRoot: process.cwd(),
                watchMode: true,
                realTimeMode: true,
                analysisDepth: 'deep',
                autoFix: false
            },

            // Configuration du dashboard
            dashboard: {
                port: 3333,
                updateInterval: 5000
            },

            // Configuration workflow
            workflow: {
                gitIntegration: true,
                cicdIntegration: true,
                autoCommit: false,
                notifications: {
                    slack: process.env.SLACK_WEBHOOK_URL,
                    email: process.env.EMAIL_NOTIFICATIONS === 'true',
                    webhook: process.env.WEBHOOK_URL
                }
            },

            // Configuration recommandations
            recommendations: {
                enabled: true,
                learningMode: true
            }
        };

        // Charger la configuration personnalis√©e si elle existe
        try {
            const customConfig = require('./claudyne-agent-config.json');
            return { ...defaultConfig, ...customConfig };
        } catch (error) {
            return defaultConfig;
        }
    }

    async start() {
        console.log('üöÄ D√©marrage de l\'agent Claudyne...');
        console.log('=======================================');

        try {
            // V√©rifications pr√©liminaires
            await this.performPreflightChecks();

            // Initialiser les composants
            await this.initializeComponents();

            // D√©marrer les services
            await this.startServices();

            // Configuration des signaux syst√®me
            this.setupSignalHandlers();

            // Affichage des informations de d√©marrage
            this.displayStartupInfo();

        } catch (error) {
            console.error('‚ùå Erreur lors du d√©marrage:', error);
            process.exit(1);
        }
    }

    async performPreflightChecks() {
        console.log('üîç V√©rifications pr√©liminaires...');

        // V√©rifier Node.js version
        const nodeVersion = process.version;
        const majorVersion = parseInt(nodeVersion.slice(1).split('.')[0]);
        if (majorVersion < 16) {
            throw new Error(`Node.js 16+ requis. Version actuelle: ${nodeVersion}`);
        }

        // V√©rifier si c'est un projet Claudyne
        const isClaudyneProject = await this.isClaudyneProject();
        if (!isClaudyneProject) {
            console.warn('‚ö†Ô∏è Ne semble pas √™tre un projet Claudyne, mais continuons...');
        }

        // V√©rifier les d√©pendances requises
        await this.checkDependencies();

        // V√©rifier les permissions
        await this.checkPermissions();

        console.log('‚úÖ V√©rifications pr√©liminaires r√©ussies');
    }

    async isClaudyneProject() {
        try {
            const packageJson = JSON.parse(
                await fs.readFile(path.join(this.config.agent.projectRoot, 'package.json'), 'utf8')
            );
            return packageJson.name && packageJson.name.includes('claudyne');
        } catch (error) {
            return false;
        }
    }

    async checkDependencies() {
        const requiredDeps = ['fs', 'path', 'events'];
        const optionalDeps = ['chokidar', 'express', 'socket.io'];

        for (const dep of requiredDeps) {
            try {
                require.resolve(dep);
            } catch (error) {
                throw new Error(`D√©pendance requise manquante: ${dep}`);
            }
        }

        for (const dep of optionalDeps) {
            try {
                require.resolve(dep);
            } catch (error) {
                console.warn(`‚ö†Ô∏è D√©pendance optionnelle manquante: ${dep}`);
                console.warn(`   Pour l'installer: npm install ${dep}`);
            }
        }
    }

    async checkPermissions() {
        try {
            await fs.access(this.config.agent.projectRoot, fs.constants.R_OK | fs.constants.W_OK);
        } catch (error) {
            throw new Error('Permissions insuffisantes sur le r√©pertoire du projet');
        }
    }

    async initializeComponents() {
        console.log('üîß Initialisation des composants...');

        // 1. Agent principal
        console.log('  üìä Initialisation de l\'agent d\'analyse...');
        this.components.agent = new ClaudyneCodeAgent(this.config.agent);

        // 2. Syst√®me de recommandations
        if (this.config.recommendations.enabled) {
            console.log('  üí° Initialisation du syst√®me de recommandations...');
            this.components.recommendations = new ClaudyneIntelligentRecommendations(
                this.components.agent
            );
        }

        // 3. Int√©gration workflow
        console.log('  üîó Initialisation de l\'int√©gration workflow...');
        this.components.workflow = new ClaudyneWorkflowIntegration(
            this.components.agent,
            this.config.workflow
        );

        // 4. Dashboard de monitoring
        console.log('  üåê Initialisation du dashboard...');
        this.components.dashboard = new ClaudyneMonitoringDashboard(
            this.components.agent,
            this.config.dashboard
        );
    }

    async startServices() {
        console.log('üöÄ D√©marrage des services...');

        // Attendre que l'agent soit pr√™t
        await new Promise((resolve) => {
            this.components.agent.once('ready', resolve);
        });

        // D√©marrer le dashboard
        this.components.dashboard.start();

        console.log('‚úÖ Tous les services sont d√©marr√©s');
    }

    setupSignalHandlers() {
        const gracefulShutdown = async (signal) => {
            console.log(`\nüõë Signal ${signal} re√ßu, arr√™t en cours...`);

            try {
                if (this.components.dashboard) {
                    this.components.dashboard.stop();
                }

                if (this.components.agent) {
                    this.components.agent.destroy();
                }

                console.log('‚úÖ Arr√™t propre termin√©');
                process.exit(0);
            } catch (error) {
                console.error('‚ùå Erreur lors de l\'arr√™t:', error);
                process.exit(1);
            }
        };

        process.on('SIGINT', () => gracefulShutdown('SIGINT'));
        process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

        process.on('uncaughtException', (error) => {
            console.error('‚ùå Exception non g√©r√©e:', error);
            gracefulShutdown('UNCAUGHT_EXCEPTION');
        });

        process.on('unhandledRejection', (reason, promise) => {
            console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
            gracefulShutdown('UNHANDLED_REJECTION');
        });
    }

    displayStartupInfo() {
        console.log('\nü§ñ CLAUDYNE CODE AGENT - D√âMARR√â');
        console.log('=================================');
        console.log(`üìÅ Projet: ${this.config.agent.projectRoot}`);
        console.log(`üåê Dashboard: http://localhost:${this.config.dashboard.port}`);
        console.log(`üëÅÔ∏è  Surveillance: ${this.config.agent.watchMode ? 'Activ√©e' : 'D√©sactiv√©e'}`);
        console.log(`üîÑ Temps r√©el: ${this.config.agent.realTimeMode ? 'Activ√©' : 'D√©sactiv√©'}`);
        console.log(`üí° Recommandations: ${this.config.recommendations.enabled ? 'Activ√©es' : 'D√©sactiv√©es'}`);
        console.log(`üîó Int√©gration Git: ${this.config.workflow.gitIntegration ? 'Activ√©e' : 'D√©sactiv√©e'}`);
        console.log('\nüìã Commandes disponibles:');
        console.log('  Ctrl+C : Arr√™ter l\'agent');
        console.log('  Dashboard : Ouvrir http://localhost:' + this.config.dashboard.port);
        console.log('\nüéØ L\'agent surveille maintenant votre code...');

        // Configuration des √©v√©nements de l'agent pour affichage
        this.setupEventLogging();
    }

    setupEventLogging() {
        const agent = this.components.agent;

        agent.on('file-changed', (filePath) => {
            const relativePath = path.relative(this.config.agent.projectRoot, filePath);
            console.log(`üìù ${new Date().toLocaleTimeString()} - Fichier modifi√©: ${relativePath}`);
        });

        agent.on('critical-issues', (issues) => {
            console.log(`üö® ${new Date().toLocaleTimeString()} - ${issues.length} probl√®mes critiques d√©tect√©s!`);
        });

        agent.on('health-check', (data) => {
            if (data.criticalIssues > 0) {
                console.log(`‚ö†Ô∏è  ${new Date().toLocaleTimeString()} - Sant√©: ${data.criticalIssues} probl√®mes critiques`);
            }
        });

        // Affichage p√©riodique des m√©triques
        setInterval(() => {
            const metrics = agent.metrics;
            console.log(`üìä ${new Date().toLocaleTimeString()} - Analys√©s: ${metrics.filesProcessed} fichiers, ${metrics.linesAnalyzed} lignes`);
        }, 60000); // Toutes les minutes
    }

    // M√©thodes utilitaires pour la configuration
    async createDefaultConfig() {
        const configPath = path.join(this.config.agent.projectRoot, 'claudyne-agent-config.json');

        const defaultConfig = {
            agent: {
                watchMode: true,
                realTimeMode: true,
                analysisDepth: 'deep',
                autoFix: false
            },
            dashboard: {
                port: 3333,
                updateInterval: 5000
            },
            workflow: {
                gitIntegration: true,
                cicdIntegration: true,
                notifications: {
                    slack: null,
                    email: false
                }
            },
            recommendations: {
                enabled: true,
                learningMode: true
            }
        };

        await fs.writeFile(configPath, JSON.stringify(defaultConfig, null, 2));
        console.log(`‚úÖ Configuration par d√©faut cr√©√©e: ${configPath}`);
    }
}

// CLI Support
if (require.main === module) {
    const launcher = new ClaudyneAgentLauncher();

    // Gestion des arguments CLI
    const args = process.argv.slice(2);

    if (args.includes('--help') || args.includes('-h')) {
        console.log(`
ü§ñ Claudyne Code Agent - Analyseur de code intelligent

USAGE:
  node start-claudyne-agent.js [options]

OPTIONS:
  --help, -h              Afficher cette aide
  --config-only           Cr√©er uniquement le fichier de configuration
  --no-dashboard          D√©marrer sans le dashboard web
  --no-watch              D√©sactiver la surveillance des fichiers
  --port <number>         Port pour le dashboard (d√©faut: 3333)
  --ci-mode               Mode CI/CD (sans interface)

EXEMPLES:
  node start-claudyne-agent.js
  node start-claudyne-agent.js --port 8080
  node start-claudyne-agent.js --no-dashboard --ci-mode

ENVIRONMENT:
  CLAUDYNE_PORT           Port pour le dashboard
  SLACK_WEBHOOK_URL       URL webhook Slack pour notifications
  EMAIL_NOTIFICATIONS     Activer notifications email (true/false)

Pour plus d'informations: https://github.com/aurelgroup/claudyne-platform
        `);
        process.exit(0);
    }

    if (args.includes('--config-only')) {
        launcher.createDefaultConfig().then(() => {
            console.log('Configuration cr√©√©e avec succ√®s');
            process.exit(0);
        }).catch(error => {
            console.error('Erreur cr√©ation config:', error);
            process.exit(1);
        });
        return;
    }

    // Appliquer les arguments CLI
    if (args.includes('--no-dashboard')) {
        launcher.config.dashboard.enabled = false;
    }

    if (args.includes('--no-watch')) {
        launcher.config.agent.watchMode = false;
        launcher.config.agent.realTimeMode = false;
    }

    const portIndex = args.indexOf('--port');
    if (portIndex !== -1 && args[portIndex + 1]) {
        launcher.config.dashboard.port = parseInt(args[portIndex + 1]);
    }

    if (process.env.CLAUDYNE_PORT) {
        launcher.config.dashboard.port = parseInt(process.env.CLAUDYNE_PORT);
    }

    // D√©marrage
    launcher.start().catch(error => {
        console.error('Erreur fatale:', error);
        process.exit(1);
    });
}

module.exports = ClaudyneAgentLauncher;